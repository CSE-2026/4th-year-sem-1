import java.util.LinkedList;

class HashTable<K, V> {
    private class Entry<K, V> {
        K key;
        V value;

        Entry(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }

    private LinkedList<Entry<K, V>>[] table;
    private int size;

    // Constructor
    @SuppressWarnings("unchecked")
    public HashTable(int capacity) {
        table = (LinkedList<Entry<K, V>>[]) new LinkedList[capacity];
        size = 0;

        for (int i = 0; i < capacity; i++) {
            table[i] = new LinkedList<>();
        }
    }

    // Hash function
    private int hash(K key) {
        return Math.abs(key.hashCode() % table.length);
    }

    // Insert a key-value pair into the dictionary
    public void insert(K key, V value) {
        int index = hash(key);
        for (Entry<K, V> entry : table[index]) {
            if (entry.key.equals(key)) {
                entry.value = value; // Update the value if the key already exists
                return;
            }
        }
        table[index].add(new Entry<>(key, value));
        size++;
    }

    // Search for a value by key
    public V search(K key) {
        int index = hash(key);
        for (Entry<K, V> entry : table[index]) {
            if (entry.key.equals(key)) {
                return entry.value;
            }
        }
        return null; // Key not found
    }

    // Delete a key-value pair
    public boolean delete(K key) {
        int index = hash(key);
        for (Entry<K, V> entry : table[index]) {
            if (entry.key.equals(key)) {
                table[index].remove(entry);
                size--;
                return true;
            }
        }
        return false; // Key not found
    }

    // Display the dictionary
    public void display() {
        for (int i = 0; i < table.length; i++) {
            System.out.print("Bucket " + i + ": ");
            for (Entry<K, V> entry : table[i]) {
                System.out.print("[" + entry.key + " : " + entry.value + "] ");
            }
            System.out.println();
        }
    }

    // Get the size of the dictionary
    public int size() {
        return size;
    }
}

public class DictionaryUsingHashing {
    public static void main(String[] args) {
        HashTable<String, String> dictionary = new HashTable<>(10);

        // Insert entries into the dictionary
        dictionary.insert("name", "Alice");
        dictionary.insert("city", "New York");
        dictionary.insert("profession", "Engineer");
       dictionary.insert("nae", "Aasd");
       dictionary.insert("ame", "Alice");
       dictionary.insert("ity", "New York");
       dictionary.insert("rofession", "Engineer");
      dictionary.insert("ae", "Aasd");
      dictionary.insert("nam", "Alice");
      dictionary.insert("cit", "New York");
      dictionary.insert("prfession", "Engineer");
     dictionary.insert("na", "Aasd");

        // Display the dictionary
        System.out.println("Dictionary:");
        dictionary.display();

        // Search for a key
        String keyToSearch = "city";
        String value = dictionary.search(keyToSearch);
        if (value != null) {
            System.out.println("\nValue for key '" + keyToSearch + "': " + value);
        } else {
            System.out.println("\nKey '" + keyToSearch + "' not found.");
        }

        // Delete a key
        String keyToDelete = "profession";
        if (dictionary.delete(keyToDelete)) {
            System.out.println("\nKey '" + keyToDelete + "' deleted successfully.");
        } else {
            System.out.println("\nKey '" + keyToDelete + "' not found.");
        }

        // Display the dictionary after deletion
        System.out.println("\nDictionary after deletion:");
        dictionary.display();
    }
}
